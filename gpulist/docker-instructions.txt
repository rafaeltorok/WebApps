-------------------------------------------------------------------------

* Using Docker Compose:

	* on the root folder of the application, where the docker-compose.yml 
		file is located:

		docker-compose up -d
		
-------------------------------------------------------------------------

* Using Docker containers:

	* First, create a custom network on Docker:
    docker network create gpulist_webapp-network
	
	* Build images for both the client, alternative client and server:

		* on ./client:
				docker build -t gpulist-webapp-client .

		* on ./alternate-client:
			docker build -t gpulist-webapp-alt-client .

		* on ./server:
			docker build -t gpulist-webapp-server .

	* Start the containers:

		* client:
			docker run -d --name gpulist-webapp-client --network gpulist_webapp-network -p 5173:80 gpulist-webapp-client
			
		* alternative client:
			docker run -d --name gpulist-webapp-alt-client --network gpulist_webapp-network -p 5174:80 gpulist-webapp-alt-client

		* server:
			docker run -d --env-file .env --name gpulist-webapp-server --network gpulist_webapp-network -p 3001:3001 -ti gpulist-webapp-server

		* server on TEST mode:
			docker run -d --env-file .env --name gpulist-webapp-server -e NODE_ENV=test --network gpulist_webapp-network -p 3001:3001 -ti gpulist-webapp-server

-------------------------------------------------------------------------

* Running the app:

    * to fetch data from the server API:
        http://localhost:3001/api/gpus

    * the frontend requires the backend address above to be able to fetch 
      any GPU data, so the backend must always redirect to port 3001
      outside the container

	* the main frontend 5173
      
	* the alternative frontend on port 5174

-------------------------------------------------------------------------

* Running E2E tests:

	* on Docker composer:

		docker compose -f docker-compose.test.yml up --build --abort-on-container-exit


	* manually:

		* after starting both the client and server containers, by using the 
			server on TEST mode, navigate to ./tests and run Cypress with:

			* UI mode:

				npm run cypress:open

			* Command line mode:

				npm run cypress:cline


-------------------------------------------------------------------------